import "fmt"

type Node struct {
	value int
	next  *Node
}

func NewNode(value int, node *Node) *Node {
	return &Node{value: value}
}

func InsertStart(value int, node *Node) *Node {
	p := NewNode(value, node)
	return p
}

func (r *Node) PrintAll() {
	fmt.Print(r.value)
	if r.next != nil {
		r.next.PrintAll()
	} else {
		fmt.Println()
	}
}

func (r *Node) InsertEnd(value int) {
	if r.next == nil {
		r.next = NewNode(value, nil)
	} else {
		r.next.InsertEnd(value)
	}
}

func (r *Node) Size() int {
	if r.next == nil {
		return 1
	} else {
		return r.next.Size() + 1
	}
}

func DeleteStart(node *Node) *Node {
	return node.next
}

func (r *Node) DeleteEnd() {
	if r.next != nil {
		if r.next.next == nil {
			r.next = nil
		} else {
			r.next.DeleteEnd()
		}
	}
}

func DeleteByValue(value int, start *Node) *Node {
	if start.value == value {
		return start.next
	} else {
		start.next.deleteByValue(value, start)
		return start
	}
}

func (r *Node) deleteByValue(value int, before *Node) {
	if r.value == value {
		if before != nil {
			before.next = r.next
		}
	} else {
		r.next.deleteByValue(value, r)
	}
}


------------------------------------------

import "fmt"

type Nodo struct {
	next  *Nodo
	value int
}

func NewNodo(valor int) *Nodo {
	p := new(Nodo)
	p.value = valor
	return p
}

func InsertStart(valor int, nodo *Nodo) *Nodo {
	p := NewNodo(valor)
	p.next = nodo
	return p
}

func (r *Nodo) PrintAll() {
	fmt.Print(" -> ")
	fmt.Print(r.value)
	if r.next != nil {
		r.next.PrintAll()
	} else {
		fmt.Println()
	}
}

func (r *Nodo) InsertEnd(valor int) {
	if r.next == nil {
		r.next = NewNodo(valor)
	} else {
		r.next.InsertEnd(valor)
	}
}

func (r *Nodo) Size() int {
	if r.next == nil {
		return 1
	} else {
		return r.next.Size() + 1
	}
}

func DeleteStart(nodo *Nodo) *Nodo {
	return nodo.next
}

func (r *Nodo) DeleteEnd() {
	if r.next != nil {
		if r.next.next == nil {
			r.next = nil
		} else {
			r.next.DeleteEnd()
		}
	}
}

func DeleteByValue(value int, start *Nodo) *Nodo {
	if start.value == value {
		return start.next
	} else {
		start.next.deleteByValue(value, start)
		return start
	}
}

func (r *Nodo) deleteByValue(value int, before *Nodo) {
	if r.value == value {
		if before != nil {
			before.next = r.next
		}
	} else {
		r.next.deleteByValue(value, r)
	}
}
